import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

def calc_efficiency(x, y):
   header = ["Jsc", "Voc", "FF", "Eff"]
   curdensity = -1*(y*1000/0.12)
   Pluz = 100  
   power = [i*j for i,j in zip(x,curdensity)]
   max_power_index = power.index(max(power))
   xmp = x[max_power_index]
   ymp = curdensity[max_power_index]
   P = xmp*ymp
   indV0 = np.where(x == 0.0)
   Jsc = curdensity[indV0[0][0]]

   xv = x
   yv = y

   for i in range(4):
        ypos = [j for j in yv if j > 0]
        yneg = [k for k in yv if k < 0]
        arry = [yneg[len(yneg)-2], yneg[len(yneg)-1], ypos[0], ypos[1]]
        arrx = []        
        for i in arry:
                for j in range(len(yv)):
                        if i == yv[j]:
                                arrx.append(xv[j]) 
        xv = np.linspace(arrx[0], arrx[-1], num=1000, endpoint=True)
        f = interp1d(arrx, arry)
        yv = f(xv)
        indy = np.where(ypos == min(ypos))
        Voc = xv[indy[0][0]]
  
   FF = P/(Voc*Jsc)
   Eff = (Jsc*Voc*FF/Pluz)*100

   print(header, Voc, Jsc, FF, Eff)

   return header, Voc, Jsc, FF, Eff, power


xi = np.linspace(-0.05, 1.10, num=116, endpoint=True)
x = np.around(xi,3)
y = np.array([-2.4033760e-03, -2.2613790e-03, -2.2645280e-03, -2.2517080e-03, -2.2676180e-03, -2.2704320e-03, -2.2617040e-03, -2.2687490e-03, -2.2625700e-03, -2.2577840e-03, -2.2630370e-03, -2.2667120e-03, -2.2590270e-03, -2.2585200e-03, -2.2716430e-03, -2.2591940e-03, -2.2722950e-03, -2.2614890e-03, -2.2584640e-03, -2.2672760e-03, -2.2563590e-03, -2.2558380e-03, -2.2695810e-03, -2.2602150e-03, -2.2584170e-03, -2.2603950e-03, -2.2550280e-03, -2.2565350e-03, -2.2597060e-03, -2.2567440e-03, -2.2500980e-03, -2.2616670e-03, -2.2556030e-03, -2.2558880e-03, -2.2504490e-03, -2.2554510e-03, -2.2556040e-03, -2.2456360e-03, -2.2479950e-03, -2.2515170e-03, -2.2425820e-03, -2.2470690e-03, -2.2389600e-03, -2.2435830e-03, -2.2412010e-03, -2.2348270e-03, -2.2389720e-03, -2.2305290e-03, -2.2218420e-03, -2.2232340e-03, -2.2324230e-03, -2.2217430e-03, -2.2231580e-03, -2.2092950e-03, -2.2133840e-03, -2.2070900e-03, -2.2115880e-03, -2.1970760e-03, -2.2016830e-03, -2.2027560e-03, -2.1894290e-03, -2.1933690e-03, -2.1718510e-03, -2.1806770e-03, -2.1740740e-03, -2.1662240e-03, -2.1604300e-03, -2.1491920e-03, -2.1549380e-03, -2.1410460e-03, -2.1248410e-03, -2.1224020e-03, -2.1030350e-03, -2.1020500e-03, -2.0890710e-03, -2.0723280e-03, -2.0579160e-03, -2.0457460e-03, -2.0332290e-03, -2.0129360e-03, -1.9929770e-03, -1.9686060e-03, -1.9439080e-03, -1.9200160e-03, -1.8855180e-03, -1.8550720e-03, -1.8192450e-03, -1.7805630e-03, -1.7290540e-03, -1.6972270e-03, -1.6405880e-03, -1.5911190e-03, -1.5269730e-03, -1.4719340e-03, -1.4034310e-03, -1.3340850e-03, -1.2642380e-03, -1.1812150e-03, -1.0996380e-03, -1.0133270e-03, -9.3192990e-04, -8.2079060e-04, -7.1685040e-04, -6.0728020e-04, -4.9354830e-04, -3.7497190e-04, -2.5193530e-04, -1.2144960e-04, -1.2901390e-07, 1.3665340e-04, 2.7790950e-04, 4.2869390e-04, 5.7966070e-04, 7.3748040e-04, 9.0281410e-04, 1.0498160e-03])
calc_efficiency(x, y)

plt.plot(x, y, '--')
plt.show()
